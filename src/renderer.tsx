import _ from 'lodash';
import React from 'react';
import { Helmet } from 'react-helmet';
import { Request } from 'express';
import { renderToString } from 'react-dom/server';
import { StaticRouterContext, Switch, Route } from 'react-router';
import { RouteConfig } from 'react-router-config';
import { StaticRouter, RouteProps } from 'react-router-dom';
import serialize from 'serialize-javascript';
import { ChunkExtractor, ChunkExtractorManager } from '@loadable/server';
import { ServerStyleSheet, StyleSheetManager } from 'styled-components'

/**
 * Custom renderRoutes function that accepts a render
 * attribute from router configuration
 *
 * @param {Array} routes Routes to render
 * @param {object} extraProps Extra props to pass to all routes
 * @param {object} switchProps Switch component props
 * @returns {Element} Routes
 */
export const renderRoutes = (
	routes: RouteConfig[],
	extraProps = {},
	switchProps = {}
): JSX.Element => {
	return (
		routes
		? (
			<Switch { ...switchProps }>
				{
					_.map(routes, (route, i: number) => (
						<Route key={ route.key || i }
							path={ route.path }
							exact={ route.exact }
							strict={ route.strict }
							// eslint-disable-next-line @typescript-eslint/no-explicit-any
							render={ (props: RouteProps & any): React.ReactNode => route.render
								? route.render({ ...props, ...extraProps, route: route })
								: <route.component { ...props } { ...extraProps } route={ route } />
							}
						/>
					))
				}
			</Switch>
		)
		: null
	);
}

type Options = {
	indexRoute?: string;
	initialState?: { [key: string]: unknown };
	SENTRY_DSN?: string;
};

type ExpressParams = unknown & {
	req: Request;
	context: StaticRouterContext;
};

/**
 * Render template (server side)
 *
 * @param {*} express Express server parameters
 * @param {Array} routesConfig Routes config
 * @param {*} loadableJson JSON generated by react-loadable with assets
 * @param {*} params Additional options passed from express server
 * @returns {string} HTML string
 */
export const renderer = (
	{ req, context }: ExpressParams,
	routesConfig: Array<RouteProps & { key: string }>, // Routes
	loadableJson: string, // stats
	// assetsJson: Assets, // JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'bundle_client', 'assets.json'), 'utf-8'))
	{
		indexRoute,
		initialState,
		SENTRY_DSN
	}: Options
): string => {

	const extractor = new ChunkExtractor({
		statsFile: loadableJson
	});

	// Render route
	const sheet = new ServerStyleSheet()
	let content = '';
	let styledStylesTags = '';
	try {
		content = renderToString(
			<ChunkExtractorManager extractor={extractor}>
				<StyleSheetManager sheet={sheet.instance}>
					<StaticRouter location={req.path} context={context}>
						{renderRoutes(routesConfig)}
					</StaticRouter>
				</StyleSheetManager>
			</ChunkExtractorManager>
		);

		styledStylesTags = sheet.getStyleTags();
	}

	catch (error) {
		console.log('SSR renderToString raised the following error:')
		console.error(error)
	}

	// From here: https://styled-components.com/docs/advanced#example
	finally {
		sheet.seal()
	}

	// Helmet
	const helmet = Helmet.renderStatic();

	// Public path
	const publicPath = `/static${indexRoute || ''}`;

	// <link rel="stylesheet" href="${ assetsJson.uiKit.css }" />
	// <link rel="stylesheet" href="${ assetsJson.app.css }" />

	// <script src="${ assetsJson.vendor.js }"></script>
	// <script src="${ assetsJson.app.js }"></script>

	// Template
	return `
		<html>
			<head>
				${ helmet.title.toString()}
				${ helmet.meta.toString()}

				<!-- <meta name="description" content="description" /> -->
				<meta charset="utf-8" />
				<meta http-equiv="x-ua-compatible" content="ie=edge" />
				<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
				<meta name="apple-mobile-web-app-capable" content="yes">

				<link rel="apple-touch-icon" sizes="180x180" href="${ publicPath}/favicon/apple-touch-icon.png">
				<link rel="icon" type="image/png" sizes="32x32" href="${ publicPath}/favicon/favicon-32x32.png">
				<link rel="icon" type="image/png" sizes="16x16" href="${ publicPath}/favicon/favicon-16x16.png">
				<link rel="manifest" href="${ publicPath}/favicon/site.webmanifest">
				<link rel="mask-icon" href="${ publicPath}/favicon/safari-pinned-tab.svg" color="#2051cb">
				<link rel="shortcut icon" href="${ publicPath}/favicon/favicon.ico">

				<meta name="msapplication-TileColor" content="#2051cb">
				<meta name="msapplication-config" content="${ publicPath}/favicon/browserconfig.xml">
				<meta name="theme-color" content="#2051cb">

				<meta property="og:type" content="website">
				<meta property="og:url" content="">
				<meta property="og:title" content="">
				<meta property="og:image" content="${ publicPath}/images/social-cover.jpg">
				<meta property="og:description" content="">
				<meta property="og:site_name" content="">
				<meta property="og:locale" content="en_US">

				<meta name="twitter:card" content="summary">
				<meta name="twitter:site" content="">
				<meta name="twitter:creator" content="">
				<meta name="twitter:url" content="">
				<meta name="twitter:title" content="">
				<meta name="twitter:description" content="">
				<meta name="twitter:image" content="${ publicPath}/images/social-cover.jpg">

				<link rel="manifest" href="${ publicPath}/manifest.json" />
				${ extractor.getLinkTags()}
				${ extractor.getStyleTags()}
				${ styledStylesTags}
			</head>
			<body>
				<div id="app">${ content}</div>
				<div id="modal-portal"></div>

				${ SENTRY_DSN ? `
					<script src="https://browser.sentry-cdn.com/5.10.2/bundle.min.js"
						integrity="sha384-ssBfXiBvlVC7bdA/VX03S88B5MwXQWdnpJRbUYFPgswlOBwETwTp6F3SMUNpo9M9"
						crossorigin="anonymous"></script>` : ''}
				${ SENTRY_DSN ? `<script>Sentry.init({ dsn: '${SENTRY_DSN}' });</script>` : ''}
				${ initialState ? `<script> window.INITIAL_STATE = ${serialize(initialState)} </script>` : ''}

				${ extractor.getScriptTags()}
			</body>
		</html>
	`;
}
